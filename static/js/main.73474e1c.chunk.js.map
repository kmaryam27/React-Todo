{"version":3,"sources":["Header.js","TodoDetails.js","Todo.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","total","unfinished","finished","TodoDetails","key","id","onClick","deleteTodo","details","Todo","tasks","length","map","e","i","src_TodoDetails","counter","checked","onChangeAction","AddTodo","onSubmit","addNewTodo","name","value","newTodo","type","placeholder","onChange","handleChange","App","state","archaive","componentDidMount","totalTasks","_this","selection","filter","setState","event","isChecked","preventDefault","mylist","target","newArchaive","newArchaiveTodo","find","newTodoList","push","Object","toConsumableArray","l","newTask","trim","concat","alert","src_Header","this","src_AddTodo","src_Todo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAciBA,QAXF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAd,aACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,eAA0CJ,EAAMK,OAChDJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,oBAA+CJ,EAAMM,YACrDL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,kBAA6CJ,EAAMO,cCC1CC,EARG,SAAAR,GAAK,OACrBC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAA+BK,IAAKT,EAAMU,GAAIC,QAAS,WAAOX,EAAMY,WAAWZ,EAAMU,MAC/FT,EAAAC,EAAAC,cAAA,SAAIH,EAAMa,SAEVZ,EAAAC,EAAAC,cAAA,aCKOW,EARF,SAAAd,GAAK,OACU,IAAvBA,EAAMe,MAAMC,OAAcf,EAAAC,EAAAC,cAAA,kCACvBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,UACKH,EAAMe,MAAME,IAAI,SAACC,EAAGC,GAAJ,OAAWlB,EAAAC,EAAAC,cAACiB,EAAD,CAAaR,WAAYZ,EAAMY,WAAYF,GAAIQ,EAAER,GAAIW,QAASF,EAAE,EAAGN,QAASK,EAAEL,QAASS,QAASJ,EAAEI,QAASb,IAAKU,EAAGI,eAAgBvB,EAAMuB,sBCEpKC,EATD,SAAAxB,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBqB,SAAUzB,EAAM0B,YAChDzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeM,GAAG,cAC/BT,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,gBAAgBC,MAAO5B,EAAM6B,QAASC,KAAK,OAAOC,YAAY,kBAAkBrB,GAAG,aAAasB,SAAUhC,EAAMiC,mBC+FvHC,6MA5FbC,MAAQ,CACNpB,MAAO,CAAC,CACNL,GAAI,EACJG,QAAS,cACTS,SAAS,GAEX,CACEZ,GAAI,EACJG,QAAS,gBACTS,SAAS,GAEX,CACEZ,GAAI,EACJG,QAAS,WACTS,SAAS,IAEXjB,MAAO,EACPE,SAAU,EACVD,WAAY,EACZ8B,SAAU,GACVP,QAAS,MAGXQ,kBAAoB,WAClB,IAAMC,EAAaC,EAAKJ,MAAMpB,MAAMC,OAC9BwB,EAAYD,EAAKJ,MAAMpB,MAAM0B,OAAO,SAAAvB,GAAC,OAAmB,IAAdA,EAAEI,UAClDiB,EAAKG,SAAS,CAACrC,MAAOiC,EAAa/B,SAAUiC,EAAUxB,OAAQV,WAAagC,EAAaE,EAAUxB,YAGrGO,eAAiB,SAACoB,GAChBJ,EAAKG,SAAS,CAACE,WAAYL,EAAKJ,MAAMb,UACtCqB,EAAME,iBAEN,IADA,IAAIC,EAASP,EAAKJ,MAAMpB,MACfI,EAAI,EAAGA,EAAI2B,EAAO9B,OAAQG,IACjC,GAAI2B,EAAO3B,GAAGN,UAAY8B,EAAMI,OAAOnB,MAAO,CAC5CkB,EAAO3B,GAAGG,QAAUqB,EAAMI,OAAOzB,QACjC,MAGJiB,EAAKG,SAAS,CAAC3B,MAAO+B,OAI1BlC,WAAa,SAACF,GACb,IAAMsC,EAAcT,EAAKJ,MAAMC,SACzBa,EAAkBV,EAAKJ,MAAMpB,MAAMmC,KAAK,SAAAhC,GAAC,OAAIA,EAAER,KAAOA,IACtDyC,EAAcZ,EAAKJ,MAAMpB,MAAM0B,OAAO,SAAAvB,GAAC,OAAIA,EAAER,KAAOA,IACzDsC,EAAYI,KAAKH,GAClBV,EAAKG,SAAS,CAAC3B,MAAOoC,EAAaf,SAAUY,EAAazC,SAAWgC,EAAKJ,MAAM5B,SAAW,EAAID,WAAaiC,EAAKJ,MAAM7B,WAAa,OAGrI2B,aAAe,SAACU,GACdJ,EAAKG,SAAS,CAACb,QAASc,EAAMI,OAAOnB,WAGvCF,WAAa,SAACiB,GACZA,EAAME,iBACN,IAAIC,EAAMO,OAAAC,EAAA,EAAAD,CAAOd,EAAKJ,MAAMpB,OACtBwC,EAAKhB,EAAKJ,MAAMpB,MAAOC,OAGvBwC,EAAU,CACd9C,GAF8B,IAA7B6B,EAAKJ,MAAMpB,MAAOC,OAAsB,EAAG8B,EAAOS,EAAI,GAAG7C,GAAW,EAGrEG,QAAS0B,EAAKJ,MAAMN,QACpBP,SAAS,GAGX,QAAO,GACL,IAAmC,KAA5BkC,EAAQ3C,QAAS4C,OAEpBX,EAAM,GAAAY,OAAAL,OAAAC,EAAA,EAAAD,CAAOd,EAAKJ,MAAMpB,OAAlB,CAAwByC,IAC9BjB,EAAKG,SAAS,CAAC3B,MAAO+B,EAAQzC,MAAQkC,EAAKJ,MAAM9B,MAAQ,EAAIC,WAAaiC,EAAKJ,MAAM7B,WAAa,EAAIuB,QAAS,KAEnH,MACA,QACI8B,MAAM,qHAMV,OACE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACyD,EAAD,CAAQrD,SAAUsD,KAAK1B,MAAM5B,SAAUD,WAAYuD,KAAK1B,MAAM7B,WAAYD,MAAOwD,KAAK1B,MAAM9B,QAC5FJ,EAAAC,EAAAC,cAAC2D,EAAD,CAAS7B,aAAc4B,KAAK5B,aAAcP,WAAYmC,KAAKnC,WAAYG,QAASgC,KAAK1B,MAAMN,UAC3F5B,EAAAC,EAAAC,cAAC4D,EAAD,CAAMhD,MAAO8C,KAAK1B,MAAMpB,MAAOH,WAAYiD,KAAKjD,qBAtFtCoD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.73474e1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst Header = props => (\r\n    <div className=\"header_div\">\r\n      <h3 className=\"center blue-text header_title\">ToDo List</h3>\r\n      <hr/>\r\n      <span>\r\n        <h4 className=\"header_title\">Total task: {props.total}</h4>\r\n        <h4 className=\"header_title\">unfinished task: {props.unfinished}</h4>\r\n        <h4 className=\"header_title\">finished task: {props.finished}</h4>\r\n      </span>\r\n    </div>\r\n  );\r\n  export default Header;","import React from 'react';\r\nimport './App.css';\r\n\r\nconst TodoDetails = props => (\r\n    <li className=\"Task-details collection-item\" key={props.id} onClick={() => {props.deleteTodo(props.id)}}>\r\n        <p>{props.details}</p> \r\n        {/* {(props.checked)?<input type=\"checkbox\" name=\"task-condition\" value={props.details} onChange={props.onChangeAction} checked />:<input type=\"checkbox\" name=\"task-condition\" value={props.details} onChange={props.onChangeAction}/>} */}\r\n        <hr/>\r\n    </li>\r\n  );\r\n\r\n  export default TodoDetails;","import React from 'react';\r\nimport './App.css';\r\nimport TodoDetails from './TodoDetails';\r\n\r\nconst Todo = props => (\r\n    (props.tasks.length === 0)?<p>we have not any tasks</p>:\r\n        <div className=\"todo collection\">\r\n            <ol>\r\n                {props.tasks.map((e, i) => (<TodoDetails deleteTodo={props.deleteTodo} id={e.id} counter={i+1} details={e.details} checked={e.checked} key={i} onChangeAction={props.onChangeAction}/>))}\r\n            </ol>\r\n        </div>\r\n    );\r\nexport default Todo;","import React from 'react';\r\nconst AddTodo = props => (\r\n    <div className=\"form-group\">\r\n      <form className=\"input-group-btn\" onSubmit={props.addNewTodo}>\r\n        <div className=\"autocomplete\" id=\"autoMainId\">\r\n          <input name=\"inputListItem\" value={props.newTodo} type=\"text\" placeholder=\"Add a new to do\" id=\"inputTxtId\" onChange={props.handleChange}/>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n  export default AddTodo;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Todo from './Todo';\nimport AddTodo from './AddTodo';\n\n\nclass App extends Component{\n  state = {\n    tasks: [{\n      id: 1,\n      details: 'cook dinner',\n      checked: true,\n    },\n    {\n      id: 2,\n      details: 'play Football',\n      checked: false,\n    },\n    {\n      id: 3,\n      details: 'watch TV',\n      checked: false,\n    }],\n    total: 0,\n    finished: 0,\n    unfinished: 0,\n    archaive: [],\n    newTodo: ''\n  }\n\n  componentDidMount = () => {\n    const totalTasks = this.state.tasks.length;\n    const selection = this.state.tasks.filter(e => (e.checked === true));\n    this.setState({total: totalTasks , finished: selection.length, unfinished: (totalTasks - selection.length)});\n  }\n\n  onChangeAction = (event) => {\n    this.setState({isChecked: !this.state.checked});\n    event.preventDefault();\n    let mylist = this.state.tasks;\n    for (let i = 0; i < mylist.length; i++) {\n      if((mylist[i].details === event.target.value)){\n        mylist[i].checked = event.target.checked;\n        break;\n      }\n    }\n    this.setState({tasks: mylist})\n  }\n\n\ndeleteTodo = (id) => {\n const newArchaive = this.state.archaive;\n const newArchaiveTodo = this.state.tasks.find(e => e.id === id);\n const newTodoList = this.state.tasks.filter(e => e.id !== id);\n  newArchaive.push(newArchaiveTodo);\n this.setState({tasks: newTodoList, archaive: newArchaive, finished: (this.state.finished + 1), unfinished: (this.state.unfinished - 1)});\n}\n\nhandleChange = (event) => {\n  this.setState({newTodo: event.target.value})\n}\n  \naddNewTodo = (event) => {\n  event.preventDefault();\n  let mylist = [...this.state.tasks];\n  const l = (this.state.tasks).length;\n  let myId;\n  ( (this.state.tasks).length !== 0)? myId = 1+ mylist[l - 1].id: myId = 1;\n  const newTask = {\n    id: myId,\n    details: this.state.newTodo,\n    checked: false\n  }\n  \n  switch(true){\n    case ((newTask.details).trim() !== ''):\n      {\n        mylist = [...this.state.tasks,newTask];\n        this.setState({tasks: mylist, total: (this.state.total + 1), unfinished: (this.state.unfinished + 1), newTodo: ''});\n      }\n    break;\n    default:\n        alert('fill task on text place then add please');\n    break;\n  }\n}\n\n  render(){\n    return(\n      <div className=\"container\">\n        <Header finished={this.state.finished} unfinished={this.state.unfinished} total={this.state.total}/>\n        <AddTodo handleChange={this.handleChange} addNewTodo={this.addNewTodo} newTodo={this.state.newTodo}/>\n        <Todo tasks={this.state.tasks} deleteTodo={this.deleteTodo}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}